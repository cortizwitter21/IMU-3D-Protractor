import time
import board
import busio
import digitalio

from adafruit_bno08x import (
    BNO_REPORT_ACCELEROMETER,
    BNO_REPORT_GYROSCOPE,
    BNO_REPORT_MAGNETOMETER,
    BNO_REPORT_ROTATION_VECTOR,
)
from adafruit_bno08x.i2c import BNO08X_I2C
from adafruit_character_lcd.character_lcd import Character_LCD_Mono

import math

i2c1 = busio.I2C(board.GP5, board.GP4, frequency=400000)
bno1 = BNO08X_I2C(i2c1)

i2c2 = busio.I2C(board.GP7, board.GP6, frequency=400000)
bno2 = BNO08X_I2C(i2c2)

for bno in (bno1, bno2):
    bno.enable_feature(BNO_REPORT_ACCELEROMETER)
    bno.enable_feature(BNO_REPORT_GYROSCOPE)
    bno.enable_feature(BNO_REPORT_MAGNETOMETER)
    bno.enable_feature(BNO_REPORT_ROTATION_VECTOR)

# LCD setup
lcd_columns = 16
lcd_rows = 2

# Define GPIO pins for LCD
lcd_rs = digitalio.DigitalInOut(board.GP0)
lcd_en = digitalio.DigitalInOut(board.GP1)
lcd_d4 = digitalio.DigitalInOut(board.GP2)
lcd_d5 = digitalio.DigitalInOut(board.GP3)
lcd_d6 = digitalio.DigitalInOut(board.GP8)
lcd_d7 = digitalio.DigitalInOut(board.GP9)

# Initialize the Reset Button (for microcontroller)
reset_button = digitalio.DigitalInOut(board.GP15)
reset_button.direction = digitalio.Direction.INPUT
reset_button.pull = digitalio.Pull.UP  # Internal pull-up resistor

# Initialize the LCD
lcd = Character_LCD_Mono(lcd_rs, lcd_en, lcd_d4, lcd_d5, lcd_d6, lcd_d7, lcd_columns, lcd_rows)

def quaternion_inverse(q):
    """Compute the inverse of a quaternion."""
    w, x, y, z = q
    norm_squared = w*w + x*x + y*y + z*z
    if norm_squared > 0:
        return (w / norm_squared, -x / norm_squared, -y / norm_squared, -z / norm_squared)
    else:
        return (0, 0, 0, 0)  # Return a zero quaternion if norm is zero (error case)
    
def quaternion_multiply(q1, q2):
    """Multiply two quaternions q1 and q2."""
    w1, x1, y1, z1 = q1
    w2, x2, y2, z2 = q2
    return (
        w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2,
        w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2,
        w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2,
        w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2
    )

def quaternion_to_euler(q):
    """Convert quaternion (w, x, y, z) to Euler angles (roll, pitch, yaw)."""
    w, x, y, z = q
    
    # Roll (x-axis rotation)
    sinr_cosp = 2 * (w * x + y * z)
    cosr_cosp = 1 - 2 * (x * x + y * y)
    roll = math.atan2(sinr_cosp, cosr_cosp)
    
    # Pitch (y-axis rotation)
    sinp = 2 * (w * y - z * x)
    if abs(sinp) >= 1:
        pitch = math.copysign(math.pi / 2, sinp)  # use 90 degrees if out of range
    else:
        pitch = math.asin(sinp)
    
    # Yaw (z-axis rotation)
    siny_cosp = 2 * (w * z + x * y)
    cosy_cosp = 1 - 2 * (y * y + z * z)
    yaw = math.atan2(siny_cosp, cosy_cosp)
    
    return roll, pitch, yaw

# calibration script: given 2 IMUs, runs the necessary calibration and returns the offsets for yaw, pitch, and roll
def calibration(bno1, bno2):
    print("Calibrating...")
    # calibration from library
    for bno in (bno1, bno2):
        bno.begin_calibration()
        # TODO: UPDATE UART/SPI
        bno.enable_feature(adafruit_bno08x.BNO_REPORT_MAGNETOMETER)
        bno.enable_feature(adafruit_bno08x.BNO_REPORT_GAME_ROTATION_VECTOR)
        start_time = time.monotonic()
        calibration_good_at = None
        for i in range(1,10):
            time.sleep(0.1)

            print("Magnetometer:")
            mag_x, mag_y, mag_z = bno.magnetic  # pylint:disable=no-member
            print("X: %0.6f  Y: %0.6f Z: %0.6f uT" % (mag_x, mag_y, mag_z))
            print("")

            print("Game Rotation Vector Quaternion:")
            (
                game_quat_i,
                game_quat_j,
                game_quat_k,
                game_quat_real,
            ) = bno.game_quaternion  # pylint:disable=no-member
            print(
                "I: %0.6f  J: %0.6f K: %0.6f  Real: %0.6f"
                % (game_quat_i, game_quat_j, game_quat_k, game_quat_real)
            )
            calibration_status = bno.calibration_status
            print(
                "Magnetometer Calibration quality:",
                adafruit_bno08x.REPORT_ACCURACY_STATUS[calibration_status],
                " (%d)" % calibration_status,
            )
            if not calibration_good_at and calibration_status >= 2:
                calibration_good_at = time.monotonic()
            if calibration_good_at and (time.monotonic() - calibration_good_at > 5.0):
                input_str = input("\n\nEnter S to save or anything else to continue: ")
                if input_str.strip().lower() == "s":
                    bno.save_calibration_data()
                    break
                calibration_good_at = None

    time.sleep(2)
    # calculating offsets
    num_cal_observations = 20
    roll_deg_offset = []
    pitch_deg_offset = []
    yaw_deg_offset = []
    # go through the calculation of the quaternions 20 times, storing the roll, pitch, and yaw each time
    for iii in range(1,num_cal_observations):
        q1 = bno1.quaternion
        q2 = bno2.quaternion

        q1_inv = quaternion_inverse(q1)

        q_rel = quaternion_multiply(q1_inv, q2)

        # Convert the relative quaternion to Euler angles
        roll, pitch, yaw = quaternion_to_euler(q_rel)

        # Convert radians to degrees
        roll_deg_offset.append(math.degrees(roll))
        pitch_deg_offset.append(math.degrees(pitch))
        yaw_deg_offset.append(math.degrees(yaw))

    # find average offset
    roll_offset_final = find_true_ave(roll_deg_offset)
    pitch_offset_final = find_true_ave(pitch_deg_offset)
    yaw_offset_final = find_true_ave(yaw_deg_offset)

    return roll_offset_final, pitch_offset_final, yaw_offset_final

def find_true_ave(list_of_vals):
    # find the mean
    mean = sum(list_of_vals) / len(list_of_vals)

    # find the variance
    variance = sum((x - mean) ** 2 for x in list_of_vals) / len(list_of_vals)

    # calculate the standard deviation
    standard_deviation = math.sqrt(variance)

    # get rid of outliers
    new_list = [val for val in list_of_vals if abs(val-mean) < 2*standard_deviation]

    # return new average
    return sum(new_list)/len(new_list)
        
    
def main():
    while True:
        roll_offset, pitch_offset, yaw_offset = calibration(bno1, bno2)
        time.sleep(0.5)
        
        # Get quaternion data from both IMUs
        q1 = bno1.quaternion
        q2 = bno2.quaternion

        q1_inv = quaternion_inverse(q1)

        q_rel = quaternion_multiply(q1_inv, q2)

        # Convert the relative quaternion to Euler angles
        roll, pitch, yaw = quaternion_to_euler(q_rel)

        # Convert radians to degrees
        roll_deg = math.degrees(roll)
        pitch_deg = math.degrees(pitch)
        yaw_deg = math.degrees(yaw)

        print("Relative Quaternion:", q_rel)
        print("Roll: {:.2f} degrees".format(roll_deg-roll_offset))
        print("Pitch: {:.2f} degrees".format(pitch_deg-pitch_offset))
        print("Yaw: {:.2f} degrees".format(yaw_deg-yaw_offset))

        if reset_button.value == False:  # Button pressed (logic low)
                print("Reset button pressed, restarting main loop...")
                time.sleep(0.5)  # Debounce delay
                break  # Exit the loop to restart the main function
        
while True:
    main()
